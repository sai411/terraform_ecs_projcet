Locals which defined in main.tf of root can’t be used directly to any other modules


To use it from root to other modules —> send it as an input and accept it as a variable only, directly locals are not sharable ad these are specific module scoped  

Variables which defined in main.tf of root can’t be used directly to any other modules even if we define empty variable in variable.tf of that module  
to use it from root main.tf —> send it as an input to module and then initialise the var in the variable.tf of that module and then use it.    
Sharing b/w modules from vac to ec2  Write the variable / local as output in the module A and take that in the root file   
Then use it as a variable in  module B , even if you are using local , need to use it as variable in module b .  
You need to add the variable in that module b specified variable file and then only you can use.  

example:  module "vpc_module" {
  
source = "/Users/saigampa/Desktop/scripts/python-codes/terraform-practice/test-locals-vars/vpc_module"

}

module "ec2" {
  
  source = "/Users/saigampa/Desktop/scripts/python-codes/terraform-practice/test-locals-vars/ ec2_module"
  cidr_test = module.vpc_module.vpc_cidr_value
}
   in vpc_module:  output "vpc_cidr_value" {
  
  value = aws_vpc.test-vpc.cidr_block
}
  or   output "vpc_cidr_value" {
  
  value = var.vpc_cidr
}
  same for locals , but need to accept at other module as variable. 


### :white_check_mark: **Correct Parts**:
* :heavy_check_mark: **Locals are module-scoped** and **used to evaluate expressions**.
* :heavy_check_mark: You **cannot modify locals at runtime** (they are immutable).
* :heavy_check_mark: Locals can be **exposed via outputs** and **passed between modules** using variables.
* :heavy_check_mark: **Variables can be passed across modules** via root module wiring.
* :heavy_check_mark: Variables can be **set via `.tfvars`, CLI, environment variables**, etc.
* :heavy_check_mark: Variables are **value mappings**, not functional expressions.
---
### :x: **Incorrect or Confusing Parts**:
1. **"Variables are global scoped"** → :x:
   * Terraform **variables are not globally scoped**.
   * They are **module-scoped** just like locals. You **explicitly pass** them down via input/output.
2. **"Variables cannot have functions"** → :x:
   * Variables **can use functions** in their `default` values, like:
     ```hcl
     variable "region" {
       default = upper("us-east-1")
     }
     ```
   * But you **can’t dynamically change a variable’s value** during runtime. The assigned value stays fixed for a run.
---
### :white_check_mark: Corrected Summary:
* **Locals**:
  * Scoped to the module.
  * Used for internal computation.
  * Immutable.
  * Can be passed indirectly by exposing as output and consuming via variable in another module.
* **Variables**:
  * Also **module-scoped** (not global).
  * Used for configuration input.
  * Can be passed between modules using input/output wiring in root module.
  * Can accept values from CLI, `.tfvars`, env vars, etc.
  * Can use functions in `default`, but the final value is static during runtime.
---
So, your understanding is **very close**, but tweak the points about **scope** and **function usage in variables**.
